{"version":3,"sources":["components/PlayButton.js","components/PlayAgain.js","components/Star.js","App.js","serviceWorker.js","index.js"],"names":["PlayButton","buttonId","status","backgroundColor","onClick","className","style","PlayAgain","gameStatus","color","Star","range","map","starId","key","utils","sum","arr","reduce","acc","curr","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","useStarMatchGameState","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","item","includes","StarMatchGame","startNewGame","candidatesAreWrong","numberStatus","number","colors","available","used","wrong","candidate","onNumberClick","currentStatus","cn","App","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7f6844d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction PlayButton({ buttonId, status, backgroundColor, onClick }) {\n  return (\n    <button\n      className=\"star\"\n      onClick={() => onClick(buttonId, status)}\n      style={{ backgroundColor: backgroundColor }}\n    >\n      {buttonId}\n    </button>\n  );\n}\n\nexport default PlayButton;\n","import React from 'react';\n\nconst PlayAgain = ({onClick, gameStatus}) => {\n  return <div className='game-done'>\n    <p style={{color: gameStatus === 'lost' ? 'red' : 'green'}}>\n      <b>\n        {\n          gameStatus === 'lost'\n          ? 'Game Over'\n          : 'You won!'\n        }\n      </b>\n    </p>\n\n    <button \n      onClick={() => onClick()}>\n        Play Again!\n    </button>\n  </div>\n  \n}\n\nexport default PlayAgain;\n","import React from 'react';\n\nfunction Star({range}) {\n  return <>\n    {\n      range.map(starId => \n        <div key={starId} className=\"star\"/>\n      )\n    }\n  </>\n}\n\nexport default Star;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PlayButton from './components/PlayButton';\nimport PlayAgain from './components/PlayAgain';\nimport Star from './components/Star';\n\nconst utils = {\n  // sum an array\n  sum: arr => arr.reduce((acc, curr) => (acc += curr), 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) =>\n    Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\n\nconst useStarMatchGameState = () => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1,9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n\n  useEffect(() => {\n    if (secondsLeft  > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n  \n      return () => clearTimeout(timerId);\n    }\n  });\n\n  const setGameState = (newCandidateNums) => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter((item) => {\n        return !newCandidateNums.includes(item)\n      });\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  };\n};\n\nfunction StarMatchGame({startNewGame}) {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useStarMatchGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0\n    ? 'won' : secondsLeft === 0 \n    ? 'lost'\n    : 'active'\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const colors = {\n    available: 'lightgray',\n    used: 'lightgreen',\n    wrong: 'lightcoral',\n    candidate: 'deepskyblue'\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === 'used' || gameStatus !== 'active') {\n      return;\n    }\n\n    // candidateNums\n    const newCandidateNums = currentStatus === 'available'\n        ? [...candidateNums, number]\n        : candidateNums.filter(cn => cn !== number)\n\n    setGameState(newCandidateNums);\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <h3>Pick 1 or more number numbers that sum up to the number of stars</h3>\n      <div className=\"stars-container\">\n        {\n          gameStatus !== 'active' ? (\n              <PlayAgain onClick={startNewGame} gameStatus={gameStatus}/>\n          ) : (\n            <Star range={utils.range(1, stars)} />\n          )\n        }\n      </div>\n\n      <div className=\"key-pad\">\n        {utils.range(1, 9).map(buttonId => (\n          <PlayButton\n            key={buttonId}\n            buttonId={buttonId}\n            status={numberStatus(buttonId)}\n            backgroundColor={colors[numberStatus(buttonId)]}\n            onClick={onNumberClick}\n          />\n        ))}\n      </div>\n\n      <div className=\"timer\">\n        <p><b>Time Remaining:</b> <em>{secondsLeft}</em></p>\n      </div>\n    </div>\n  );\n}\n\nfunction App(){\n  const [gameId, setGameId] = useState(1);\n  return <StarMatchGame key={gameId} startNewGame={() => setGameId(gameId + 1)}/>\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}